// Generated by dojo-bindgen on Thu, 5 Sep 2024 16:48:40 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;
using System.Numerics;

// System definitions for `brewmaster::systems::actions::Brewmaster` contract

public class Brewmaster : MonoBehaviour
{
    // The address of this contract
    public string contractAddress;


    // Call the `dojo_init` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_init(Account account)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();


        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "dojo_init",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `updateSystemManager` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> updateSystemManager(Account account, FieldElement managerOfWorld)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(managerOfWorld.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "updateSystemManager",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `updateMaxScale` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> updateMaxScale(Account account, ushort maxTable, ushort maxStool)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(maxTable).Inner);
        calldata.Add(new FieldElement(maxStool).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "updateMaxScale",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `createPub` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> createPub(Account account)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();


        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "createPub",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `addStool` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> addStool(Account account, ushort tableIndex)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(tableIndex).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "addStool",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `addTable` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> addTable(Account account)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();


        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "addTable",
                calldata = calldata.ToArray()
            }
        });
    }



    // Call the `closingUpPub` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> closingUpPub(Account account, U256 treasury, U256 points, BigInteger closedAt, FieldElement[] managerSignature)
    {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(treasury.low).Inner);
        calldata.Add(new FieldElement(treasury.high).Inner);
        calldata.Add(new FieldElement(points.low).Inner);
        calldata.Add(new FieldElement(points.high).Inner);
        calldata.Add(new FieldElement(closedAt).Inner);
        calldata.Add(new FieldElement(managerSignature.Length).Inner);
        calldata.AddRange(managerSignature.SelectMany(managerSignatureItem => new[] { managerSignatureItem.Inner }));

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "closingUpPub",
                calldata = calldata.ToArray()
            }
        });
    }

}
